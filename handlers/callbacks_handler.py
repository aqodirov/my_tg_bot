from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.types import CallbackQuery, Message
from messages.start_text import TEXT

# –¢—É—Ç —è –ø—Ä–æ–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª —Å–µ—Ä–≤–∏—Å—ã –∏–∑ –ø–∞–∫–µ—Ç–∞ services
from services.openai_service import ask_gpt
from services.random_fact import get_fact
from services.recommendation_service import get_recommendation
from services.translator_service import translate_text
from services.personas import personas
from services.quiz_data import quiz_questions

# –ó–¥–µ—Å—å —è –ø—Ä–æ–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from keyboards.inline import (
    info_inline,
    persona_menu,
    translator_menu,
    quiz_keyboard,
    random_fact_menu
)

# –ó–¥–µ—Å—å —è –ø—Ä–æ–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è, —á—Ç–æ–±—ã —É –º–µ–Ω—è —à–ª–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è
from states import PersonaState, QuizState, TranslatorState
from aiogram.fsm.state import StatesGroup, State

router = Router()

# –≠—Ç–æ –±–ª–æ–∫ –º–æ–µ–≥–æ –∫–æ–¥–∞ –ø—Ä–æ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç
@router.callback_query(F.data == "random_fact")
async def random_fact_callback(callback: CallbackQuery):
    await callback.answer("üé≤ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–∞–∫—Ç...")
    fact = await get_fact()
    text = f"üêº <b>–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç:</b>\n\n{fact}"
    await callback.message.edit_text(text, reply_markup=random_fact_menu())

@router.callback_query(F.data == "random_fact_again")
async def random_fact_again_callback(callback: CallbackQuery):
    await callback.answer("üîÅ –û–±–Ω–æ–≤–ª—è—é —Ñ–∞–∫—Ç...")
    fact = await get_fact()
    text = f"üêº <b>–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç:</b>\n\n{fact}"
    await callback.message.edit_text(text, reply_markup=random_fact_menu())

@router.callback_query(F.data == "delete_fact_block")
async def delete_fact_block_callback(callback: CallbackQuery):
    await callback.message.edit_text(TEXT, reply_markup=info_inline())
    await callback.answer("‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

# –ó–¥–µ—Å—å —É –º–µ–Ω—è ChatGPT –ø–æ–º–æ—â–Ω–∏–∫ / –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
@router.callback_query(F.data == "chatgpt_interface")
async def chatgpt_interface_callback(callback: CallbackQuery):
    text = (
        "ü§ñ <b>ChatGPT-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</b>\n\n"
        "–ù—É –∫–∞–∫ –¥–µ–ª–∞ –º–æ–π –¥—Ä—É–≥? –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∞ —è –ø–æ–º–æ–≥—É —Å –æ—Ç–≤–µ—Ç–æ–º."
    )
    await callback.message.edit_text(text, reply_markup=callback.message.reply_markup)
    await callback.answer()

# –ó–¥–µ—Å—å —É –º–µ–Ω—è –±–ª–æ–∫ –∫–æ–¥–∞ –ø—Ä–æ –≤—ã–±–æ—Ä –≤–µ–ª–∏–∫–æ–π –ø–µ—Ä—Å–æ–Ω—ã –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞–∏–∏
@router.callback_query(F.data == "dialog_persona")
async def dialog_persona_callback(callback: CallbackQuery):
    await callback.message.edit_text(
        "üß† –í—ã–±–µ—Ä–∏, —Å –∫–µ–º —Ö–æ—á–µ—à—å –ø–æ–±–µ—Å–µ–¥–æ–≤–∞—Ç—å:",
        reply_markup=persona_menu()
    )
    await callback.answer()

# –ó–¥–µ—Å—å —è –≤–æ–∑–≤—Ä–∞—â–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "back_main_menu")
async def back_main_menu_callback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(TEXT, reply_markup=info_inline())
    await callback.answer()

# –ó–¥–µ—Å—å –≤—ã–±–µ—Ä–∞–µ–º –ø–µ—Ä—Å–æ–Ω—É –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
@router.callback_query(F.data.startswith("persona_"))
async def choose_persona(callback: CallbackQuery, state: FSMContext):
    persona_key = callback.data.replace("persona_", "")
    persona_info = personas[persona_key]

    await state.set_state(PersonaState.persona)
    await state.update_data(persona_key=persona_key)

    await callback.message.edit_text(
        f"üí¨ –¢—ã –≥–æ–≤–æ—Ä–∏—à—å —Å {persona_info['name']}. –ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:",
        reply_markup=persona_menu()
    )
    await callback.answer()

# –ó–¥–µ—Å—å –º–æ–π –∫–≤–∏–∑
@router.callback_query(F.data == "quiz")
async def start_quiz(callback: CallbackQuery, state: FSMContext):
    await state.set_state(QuizState.question_index)
    await state.update_data(question_index=0, score=0)

    index = 0
    question_data = quiz_questions[index]
    text = f"üç≠ <b>–í–æ–ø—Ä–æ—Å ‚Ññ{index + 1}:</b> {question_data['question']}"

    await callback.message.edit_text(text, reply_markup=quiz_keyboard(question_data['options']))
    await callback.answer()

@router.callback_query(F.data.startswith("quiz_answer_"))
async def handle_answer(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    index = data["question_index"]
    score = data["score"]
    selected = callback.data.replace("quiz_answer_", "")
    correct_answer = quiz_questions[index]["answer"]

    if selected == correct_answer:
        score += 1
        await callback.answer("‚úÖ –í–µ—Ä–Ω–æ!", show_alert=False)
    else:
        await callback.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}", show_alert=False)

    index += 1
    if index < len(quiz_questions):
        await state.update_data(question_index=index, score=score)
        next_q = quiz_questions[index]
        text = f"üç≠ <b>–í–æ–ø—Ä–æ—Å ‚Ññ{index + 1}:</b> {next_q['question']}"
        await callback.message.edit_text(text, reply_markup=quiz_keyboard(next_q["options"]))
    else:
        total = len(quiz_questions)
        await callback.message.edit_text(
            f"üèÅ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n<b>–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b> {score}/{total}"
        )
        await state.clear()

# –¢—É—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
@router.callback_query(F.data == "translator")
async def translator_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üåê –í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=translator_menu())

@router.callback_query(F.data.startswith("translate_"))
async def choose_translation_direction(callback: CallbackQuery, state: FSMContext):
    direction = callback.data.replace("translate_", "").replace("_", "-")
    await state.set_state(TranslatorState.text)
    await state.update_data(direction=direction)
    await callback.message.edit_text("‚úçÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏:")
    await callback.answer()

@router.message(TranslatorState.text)
async def handle_translation(message: Message, state: FSMContext):
    data = await state.get_data()
    direction = data.get("direction")
    text_to_translate = message.text

    translated = await translate_text(text_to_translate, direction)
    await message.answer(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥:\n\n{translated}")
    await state.clear()

#  –ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∫–æ–º–º–µ–Ω–¥–∞—Ü–∏–π
class RecommendationState(StatesGroup):
    waiting = State()

@router.callback_query(F.data == "recommendations")
async def recommendations_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üé¨ –í–≤–µ–¥–∏, —á—Ç–æ —Ö–æ—á–µ—à—å: —Ñ–∏–ª—å–º, –∫–Ω–∏–≥—É, —Å–µ—Ä–∏–∞–ª –∏–ª–∏ –º—É–∑—ã–∫—É:")
    await state.set_state(RecommendationState.waiting)
    await callback.answer()

@router.message(RecommendationState.waiting)
async def handle_recommendation(message: Message, state: FSMContext):
    reply = await get_recommendation(message.text)
    await message.answer(reply)
    await state.clear()

# –¢—É—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ–æ–µ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
@router.message(PersonaState.persona)
async def persona_conversation(message: Message, state: FSMContext):
    data = await state.get_data()
    persona_key = data.get("persona_key")

    if not persona_key:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /start")
        await state.clear()
        return

    persona = personas[persona_key]
    prompt = message.text

    reply = await ask_gpt(prompt, system_role=persona["system_role"])
    await message.answer(reply)

# –æ–±—â–∏–π ChatGPT, –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏

@router.message(StateFilter(None))
async def chatgpt_text_handler(message: Message):
    user_text = message.text
    reply = await ask_gpt(
        user_text,
        system_role="–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ—Ç–≤–µ—á–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ."
    )
    await message.answer(reply)
